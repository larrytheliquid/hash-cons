(A : Set)
(m n
 : μ ⊤
   (`Arg (Tag (cons "zero" (cons "suc" nil)))
    (λ t →
       case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
       (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t))
   tt)
→
μ
(μ ⊤
 (`Arg (Tag (cons "zero" (cons "suc" nil)))
  (λ t →
     case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
     (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t))
 tt)
(`Arg (Tag (cons "vnil" (cons "vcons" nil)))
 (λ t →
    case (cons "vnil" (cons "vcons" nil))
    (λ _ →
       Desc
       (μ ⊤
        (`Arg (Tag (cons "zero" (cons "suc" nil)))
         (λ t₁ →
            case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
            (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t₁))
        tt))
    (pair (`End (con (pair here refl)))
     (pair
      (`Arg
       (μ ⊤
        (`Arg (Tag (cons "zero" (cons "suc" nil)))
         (λ t₁ →
            case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
            (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t₁))
        tt)
       (λ n₁ →
          `Arg
          (μ
           (μ ⊤
            (`Arg (Tag (cons "zero" (cons "suc" nil)))
             (λ t₁ →
                case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
                (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t₁))
            tt)
           (`Arg (Tag (cons "vnil" (cons "vcons" nil)))
            (λ t₁ →
               case (cons "vnil" (cons "vcons" nil))
               (λ _ →
                  Desc
                  (μ ⊤
                   (`Arg (Tag (cons "zero" (cons "suc" nil)))
                    (λ t₂ →
                       case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
                       (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t₂))
                   tt))
               (pair (`End (con (pair here refl)))
                (pair
                 (`Arg
                  (μ ⊤
                   (`Arg (Tag (cons "zero" (cons "suc" nil)))
                    (λ t₂ →
                       case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
                       (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t₂))
                   tt)
                  (λ n₂ →
                     `Arg A
                     (λ _ → `Rec n₂ (`End (con (pair (there here) (pair n₂ refl)))))))
                 tt))
               t₁))
           m)
          (λ _ → `Rec n₁ (`End (con (pair (there here) (pair n₁ refl)))))))
      tt))
    t))
n →
μ
(μ ⊤
 (`Arg (Tag (cons "zero" (cons "suc" nil)))
  (λ t →
     case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
     (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t))
 tt)
(`Arg (Tag (cons "vnil" (cons "vcons" nil)))
 (λ t →
    case (cons "vnil" (cons "vcons" nil))
    (λ _ →
       Desc
       (μ ⊤
        (`Arg (Tag (cons "zero" (cons "suc" nil)))
         (λ t₁ →
            case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
            (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t₁))
        tt))
    (pair (`End (con (pair here refl)))
     (pair
      (`Arg
       (μ ⊤
        (`Arg (Tag (cons "zero" (cons "suc" nil)))
         (λ t₁ →
            case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
            (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t₁))
        tt)
       (λ n₁ →
          `Arg A
          (λ _ → `Rec n₁ (`End (con (pair (there here) (pair n₁ refl)))))))
      tt))
    t))
(ind ⊤
 (`Arg (Tag (cons "zero" (cons "suc" nil)))
  (λ t →
     case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
     (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t))
 (λ _ _ →
    μ ⊤
    (`Arg (Tag (cons "zero" (cons "suc" nil)))
     (λ t →
        case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
        (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t))
    tt →
    μ ⊤
    (`Arg (Tag (cons "zero" (cons "suc" nil)))
     (λ t →
        case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
        (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t))
    tt)
 (λ u t,c →
    case (cons "zero" (cons "suc" nil))
    (λ t →
       (c
        : El ⊤
          (case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
           (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t)
          (μ ⊤
           (`Arg (Tag (cons "zero" (cons "suc" nil)))
            (λ t₁ →
               case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
               (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t₁)))
          u)
       →
       All ⊤
       (case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
        (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t)
       (μ ⊤
        (`Arg (Tag (cons "zero" (cons "suc" nil)))
         (λ t₁ →
            case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
            (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t₁)))
       (λ u₁ n₁ →
          μ ⊤
          (`Arg (Tag (cons "zero" (cons "suc" nil)))
           (λ t₁ →
              case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
              (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t₁))
          u₁ →
          μ ⊤
          (`Arg (Tag (cons "zero" (cons "suc" nil)))
           (λ t₁ →
              case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
              (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t₁))
          u₁)
       u c →
       μ ⊤
       (`Arg (Tag (cons "zero" (cons "suc" nil)))
        (λ t₁ →
           case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
           (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t₁))
       u →
       μ ⊤
       (`Arg (Tag (cons "zero" (cons "suc" nil)))
        (λ t₁ →
           case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
           (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t₁))
       u)
    (pair (λ q ih n₁ → con (pair here refl))
     (pair
      (λ m,q ih,tt n₁ →
         ind ⊤
         (`Arg (Tag (cons "zero" (cons "suc" nil)))
          (λ t →
             case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
             (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t))
         (λ _ _ →
            μ ⊤
            (`Arg (Tag (cons "zero" (cons "suc" nil)))
             (λ t →
                case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
                (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t))
            tt →
            μ ⊤
            (`Arg (Tag (cons "zero" (cons "suc" nil)))
             (λ t →
                case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
                (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t))
            tt)
         (λ u₁ t,c₁ →
            case (cons "zero" (cons "suc" nil))
            (λ t →
               (c
                : El ⊤
                  (case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
                   (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t)
                  (μ ⊤
                   (`Arg (Tag (cons "zero" (cons "suc" nil)))
                    (λ t₁ →
                       case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
                       (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t₁)))
                  u₁)
               →
               All ⊤
               (case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
                (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t)
               (μ ⊤
                (`Arg (Tag (cons "zero" (cons "suc" nil)))
                 (λ t₁ →
                    case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
                    (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t₁)))
               (λ u₂ n₂ →
                  μ ⊤
                  (`Arg (Tag (cons "zero" (cons "suc" nil)))
                   (λ t₁ →
                      case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
                      (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t₁))
                  u₂ →
                  μ ⊤
                  (`Arg (Tag (cons "zero" (cons "suc" nil)))
                   (λ t₁ →
                      case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
                      (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t₁))
                  u₂)
               u₁ c →
               μ ⊤
               (`Arg (Tag (cons "zero" (cons "suc" nil)))
                (λ t₁ →
                   case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
                   (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t₁))
               u₁ →
               μ ⊤
               (`Arg (Tag (cons "zero" (cons "suc" nil)))
                (λ t₁ →
                   case (cons "zero" (cons "suc" nil)) (λ _ → Desc ⊤)
                   (pair (`End tt) (pair (`Rec tt (`End tt)) tt)) t₁))
               u₁)
            (pair (λ q ih n₂ → n₂)
             (pair
              (λ m,q₁ ih,tt₁ n₂ →
                 con (pair (there here) (pair (proj₁ ih,tt₁ n₂) refl)))
              tt))
            (proj₁ t,c₁) (proj₂ t,c₁))
         tt n₁ (proj₁ ih,tt n₁))
      tt))
    (proj₁ t,c) (proj₂ t,c))
 tt n m)
